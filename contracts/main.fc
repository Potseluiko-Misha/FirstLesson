#pragma version >=0.4.0;
#include "imports/stdlib.fc";

(int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(64),
        (ds.slice_bits() > 0  ? ds~load_dict() : new_dict())
    );
    ;; return ds.preload_uint(64) - не имеет курсора;
}

() save_data(int res, cell dict) impure {
    set_data(
        begin_cell()
            .store_uint(res, 64)
            .store_dict(dict)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flag = cs~load_uint(4);
    if (flag & 1) {
        return ();
    }

    int res = load_data();

    int num = in_msg_body~load_uint(32);

    res += num; ;; res = res + num;

    save_data(res);
}

int get_res() method_id {
    return load_data();
}

;; types of specificator: 
;; на первом месте стоит impure, только потом можно inline;
;; 1) impure - если меняем состояние контракта; 
;; 2) inline - опитимизирует контракт при большом количестве вызовов (подставляет код функции, в место откуда ее вызывают (экономит газ));
;; 3) inline_ref - схож с обычным inline, дает преимущества, если функция используется много раз ( >5 )(при вызове функции все исполняется в одной ячейке);
;; 4) method_id - чтение данных, всегда ставится для геттеров;

;; recursion 
;;int power(int a, int n) {
;;    if (n == 0) {
;;        return 1;
;;   }
;;    if (n % 2 == 1) {
;;        return power(a, n - 1) * a;
;;    }
;;
;;    int b = power(a,  n / 2);
;;    return b * b;
;;}

;;cell clean_dictionary(cell dict, int total) {
;;    int pivot = total - 10;
;;    do {
;;        (pivot, slice value, int found) = dict.udict_get_prev?(256, pivot);
;;
;;        if (found) {
;;            dict~udict_delete_get?(256, pivot);
;;        }
;;    } until ( ~ found)
;;
;;    return dict;
;;}

;;var get_addrr_list() method_id {
;;    (_, cell dict) = load_data();
;;
;;    var l = null();
;;    int pivot = 100;
;;
;;    do {
;;        (pivot, slice value, int found) = dict.udict_get_prev?(256, pivot);
;;
;;        if (found) {
;;            slice addr = value~load_msg_addr();
;;
;;            l = cons(addr, l);
;;        }
;;
;;    } until ( ~ found)
;;
;;    return l;
;;S}