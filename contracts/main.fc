#pragma version >=0.4.0;
#include "imports/stdlib.fc";

int load_data() inline {
    slice ds = get_data().begin_parse();
    return ds~load_uint(64);
    ;;return ds.preload_uint(64) - не имеет курсора
}

() save_data(int res) impure {
    set_data(
        begin_cell()
            .store_uint(res, 64)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flag = cs~load_uint(4);
    if (flag & 1) {
        return ();
    }

    int res = load_data();

    int num = in_msg_body~load_uint(32);

    res += num; ;; res = res + num;

    save_data(res);
}

int get_res() method_id {
    return load_data();
}

;; types of specificator: 
;; на первом месте стоит impure, только потом можно inline;
;; 1) impure - если меняем состояние контракта; 
;; 2) inline - опитимизирует контракт при большом количестве вызовов (подставляет код функции, в место откуда ее вызывают (экономит газ));
;; 3) inline_ref - схож с обычным inline, дает преимущества, если функция используется много раз ( >5 )(при вызове функции все исполняется в одной ячейке);
;; 4) method_id - чтение данных, всегда ставится для геттеров;